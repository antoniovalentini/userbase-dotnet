@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using Userbase.Client
@using Userbase.Client.Data
@using Userbase.Client.Data.Models
@using Userbase.Client.Models
@using Userbase.Client.Ws
@using WebSocket4Net
@inject NavigationManager NavigationManager
@inject AuthMain Auth
@inject Db DbManager
@inject IConfiguration Configuration;
@inject WsWrapper Ws;

<h1>Hello, world!</h1>

<label>@_labelValue</label>

<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="OpenDb" disabled="@(!IsAuth)">Open DB</button>
<button @onclick="CloseWs" disabled="@(!WsOpen)">Close WS</button>

<hr>

<ul id="messagesList" style="word-break: break-all;">
    @foreach (var message in _messages)
    {
        <li style="word-break: break-all;">@message</li>
    }
</ul>

@code {
    private HubConnection _hubConnection;
    private readonly List<string> _messages = new List<string>();
    private static string _labelValue;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    async Task Send()
    {
        var username = Configuration["ub_username"];
        var password = Configuration["ub_password"];
        var request = new SignInRequest { Username = username, Password = password, RememberMe = "none" };
        var response = await Auth.SignIn(request);

        if (response.UserId != null)
            IsAuth = true;
    }

    Task CloseWs() => Ws.Instance4Net.CloseAsync();

    async Task OpenDb()
    {
        var request = new OpenDatabaseRequest { DatabaseName = "todos", ChangeHandler = _changeHandler };
        await DbManager.OpenDatabase(request);
    }

    readonly Action<List<Database.Item>> _changeHandler = (items) =>
    {
        _labelValue = $"Received {items.Count} items";
    };

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    public bool WsOpen => Ws.Instance4Net != null && Ws.Instance4Net.State == WebSocketState.Open;

    public bool IsAuth;
}